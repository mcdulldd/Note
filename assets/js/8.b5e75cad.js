(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{368:function(t,s,a){"use strict";a.r(s);var n=a(1),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"effective-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#effective-javascript"}},[t._v("#")]),t._v(" Effective JavaScript")]),t._v(" "),a("h2",{attrs:{id:"让自己习惯javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#让自己习惯javascript"}},[t._v("#")]),t._v(" 让自己习惯JavaScript")]),t._v(" "),a("h3",{attrs:{id:"了解你使用的javascript版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解你使用的javascript版本"}},[t._v("#")]),t._v(" 了解你使用的JavaScript版本")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ol",[a("li",[t._v("决定你的应用程序支持JavaScript的哪些版本")]),t._v(" "),a("li",[t._v("确保你使用的任何JavaScript特性对于应用程序将要运行的所有环境都是支持的")]),t._v(" "),a("li",[t._v("总是在执行严格模式检查的环境中测试严格代码")]),t._v(" "),a("li",[t._v("当心连接那些在不同严格模式下有不同预期的脚本")])])]),t._v(" "),a("p",[t._v('由于JavaScript历史悠久且实现多样化，因此我们很难确定哪些特性在哪些平台上是可用的。另一方面，JavaScript的主要生态系统，Web浏览器，它并不支持指定某个JavaScript版本来执行代码。某些情况下你可能需要某个特定的JavaScript版本。\nES5中引入了另一个版本控制的考量——严格模式(strict mode)，该模式允许你选择在受限制的JavaScript版本中禁止使用一些JavaScript语言中问题较多或易于出错的特性。\n启用严格模式的方法，是在程序的最开始添加字符串"use strict"。\n"use strict"指令只能在脚本或者函数的顶部才能生效，这样在大型的应用软件中，将多个文件连接成单个文件会出现问题，目前有一下几个解决方法：')]),t._v(" "),a("ol",[a("li",[t._v("不要将进行严格模式检查的文件和不要进行严格模式检查的文件连接起来。但是这会限制对文件结构的控制力，而且至少要部署两个独立的文件。")]),t._v(" "),a("li",[t._v("通过将其自身包裹在立即调用的函数表达式中的方式连接多个文件，即使在不同的模式下都会被独立的解释执行。这种方式会导致这些文件的内容不会在全局作用域内解释")]),t._v(" "),a("li",[t._v("编写文件使其在两种模式下行为一致。为了达到更为普遍的兼容性，建议在严格模式下编写代码。")])]),t._v(" "),a("h3",{attrs:{id:"理解javascript的浮点数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解javascript的浮点数"}},[t._v("#")]),t._v(" 理解JavaScript的浮点数")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ol",[a("li",[t._v("JavaScript的数字都是双精度的浮点数")]),t._v(" "),a("li",[t._v("JavaScript中的整数仅仅是双精度浮点数的一个子集，而不是一个单独的数据类型")]),t._v(" "),a("li",[t._v("位运算符将数字视为32位的有符号整数")]),t._v(" "),a("li",[t._v("当心浮点运算中的精度陷阱")])])]),t._v(" "),a("p",[t._v("JavaScript只有一种数值型数据类型，可以使用"),a("code",[t._v("typeof")]),t._v("运算符查看数字的类型。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("98.6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n")])])]),a("p",[t._v("虽然缺少明显的整数类型，但是完全可以进行整数运算。大多数的算数运算符可以使用整数、实数或者两者的组合进行计算。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 21.9")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.9")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])])]),a("p",[t._v("然而位运算符比较特殊，JavaScript不会直接将操作数作为浮点数进行运算，而是会将其隐式的转换为32位整数后进行计算：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\n")])])]),a("p",[t._v("JavaScript中的数字"),a("code",[t._v("8")]),t._v("和"),a("code",[t._v("1")]),t._v("都是双精度浮点数，可以用0和1的序列表示成32位整数。"),a("br"),t._v(" "),a("code",[t._v("8")]),t._v("表示成32位及二进制的序列为"),a("code",[t._v("00000000000000000000000000001000")]),a("br"),t._v(" "),a("code",[t._v("1")]),t._v("表示成32位及二进制的序列为"),a("code",[t._v("00000000000000000000000000000001")]),a("br"),t._v("\n按照位或运算表达式合并两个比特序列。结果为"),a("code",[t._v("00000000000000000000000000001001")]),t._v("，这个序列表示"),a("code",[t._v("9")])]),t._v(" "),a("p",[t._v("浮点运算只能产生近似的结果，四舍五入到最接近的可表示的实数，当执行一系列运算，随着舍入误差的积累，运算的结果会越来越不精确。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.6000000000000001")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.6")]),t._v("\n")])])]),a("p",[t._v("一个有效的解决方法是尽可能的采用整数值运算。")]),t._v(" "),a("h3",{attrs:{id:"担心隐式的强制转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#担心隐式的强制转换"}},[t._v("#")]),t._v(" 担心隐式的强制转换")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ol",[a("li",[t._v("类型错误可能被隐式的强制转换所隐藏。")]),t._v(" "),a("li",[t._v("重载的运算符+是进行加法运算还是字符串连接取决于其参数类型。")]),t._v(" "),a("li",[t._v("对象通过valueOf方法强制转换为数字，通过toString方法强制转换为字符串。")]),t._v(" "),a("li",[t._v("具有valueOf方法的对象应该实现toString方法，返回一个有valueOf方法产生的数字的字符串表示。")]),t._v(" "),a("li",[t._v("测试一个值是否为未定义的值，应该使用typeof或者与undeined进行比较而不是使用真值运算。")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4 true转换为数字1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fun"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TypeError:string is not a function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//TypeError: Cannot read property "x" of null')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"23" 偏爱字符串，遇到字符串，那么优先用字符串连接')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"33" 加法运算是从左到右，所以等价于(1+2)+"3"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"123" ')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"17"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//51")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//9")]),t._v("\n")])])]),a("p",[t._v("NaN是JavaScript中唯一一个不等于其自身的值，可以用来测试值是否为NaN")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("如果知道待测试的值是数字，可以使用"),a("code",[t._v("isNaN")]),t._v("来测试是否为NaN")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("如何控制对象的强制类型转换")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"J"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JS ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[object Obj]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object:"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object:7")]),t._v("\n\n解释：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 在需要数字的场合，优先判断valueOf，没有的话，则采用toString。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 如果对象同时拥有valueOf和toString方法，同时又一定是需要数字的场合，那么JavaScript盲目的选择valueOf方法而不是toString方法来解决这种含糊的情况。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" 针对"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("：最好避免使用valueOf方法，除非对象的确需要一个数字的抽象，并且obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("能产生一个obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("的字符串的表示。\n")])])]),a("p",[a("strong",[t._v('JavaScript中有7个假值：false、0、-0、""、NaN、null和undefined，其他都为真值')])]),t._v(" "),a("h3",{attrs:{id:"原始类型优于封装对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型优于封装对象"}},[t._v("#")]),t._v(" 原始类型优于封装对象")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("小结")]),t._v(" "),a("ol",[a("li",[t._v("当做相等比较时，原始类型的封装对象与其原始值行为不一致")]),t._v(" "),a("li",[t._v("获取和设置原始类型值的属性会隐式的创建封装对象")])])]),t._v(" "),a("p",[t._v("当做相等比较时，原始类型的封装对象与其原始值行为不一致")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n")])])]),a("p",[t._v("每个String对象都是一个单独的对象，其只等于自身")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ns1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\ns1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("对原始值设置属性时会产生隐式封装：\n原始值->封装类型（产生封装对象）->封装对象执行方法/设置属性->返回原始值->抛弃封装对象。\n所以更新封装不会造成持久的影响，同时对原始值设置属性是没有意义的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someProperty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someProperty "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),a("h3",{attrs:{id:"避免对混合类型使用-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免对混合类型使用-运算符"}},[t._v("#")]),t._v(" 避免对混合类型使用==运算符")]),t._v(" "),a("h3",{attrs:{id:"了解分号插入的局限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解分号插入的局限"}},[t._v("#")]),t._v(" 了解分号插入的局限")]),t._v(" "),a("h3",{attrs:{id:"视字符串为16位的代码单元序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视字符串为16位的代码单元序列"}},[t._v("#")]),t._v(" 视字符串为16位的代码单元序列")]),t._v(" "),a("h2",{attrs:{id:"变量作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[t._v("#")]),t._v(" 变量作用域")]),t._v(" "),a("h2",{attrs:{id:"使用函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用函数"}},[t._v("#")]),t._v(" 使用函数")]),t._v(" "),a("h2",{attrs:{id:"对象和原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象和原型"}},[t._v("#")]),t._v(" 对象和原型")]),t._v(" "),a("h2",{attrs:{id:"数组和字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组和字典"}},[t._v("#")]),t._v(" 数组和字典")]),t._v(" "),a("h2",{attrs:{id:"库和api设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#库和api设计"}},[t._v("#")]),t._v(" 库和API设计")]),t._v(" "),a("h2",{attrs:{id:"并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")])])}),[],!1,null,null,null);s.default=r.exports}}]);